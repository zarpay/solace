# Change Log
All notable changes to this project will be documented in this file.
 
The format is based on [Keep a Changelog](http://keepachangelog.com/) and this project adheres to [Semantic Versioning](http://semver.org/).

### Template

```markdown
## [VERSION] - yyyy-mm-dd
  
### Added
1. 

### Changed
 
### Fixed
```

## [0.0.8] - 2025-08-11
  
### Added
1. Added `load` method to `Solace::Constants` to load constants from a YAML file. This method allows for loading constants from a YAML file (i.e. custom program addresses and mint accounts).
2. Added `to_s` and `address` method to `Solace::Keypair` and `Solace::PublicKey` to return the public key as a Base58 string.
3. Added `get_signature_status` and `get_signature_statuses` to `Solace::Connection`.
4. Added `RPCClient` to `Solace::Utils` to handle HTTP requests to a Solana RPC node.
5. Added `Errors` module to `Solace::Utils` to handle errors from the HTTP requests made to the Solana RPC node.

### Changed
1. All methods that take a `Solace::Keypair` or `Solace::Pubkey` where an address is needed now also accept a plain string address. This prevents the need of creating instances of the classes when all that is needed is the address. This is with the exception of the low-level instruction builders, which only expect the correct data and indicies with no required casting.
2. Changed `wait_for_confirmed_signature` method to accept a `timeout`, `interval`, and `commitment` keyword arguments (breaking change on commitment).
 
### Fixed
1. Fixed `get_or_create_address` method in `Solace::Programs::AssociatedTokenAccount` to return the address of the associated token account if it already exists by checking if there is any data at the address.

## [0.0.7] - 2025-08-09
  
### Added
1. Added `AssociatedTokenAccountProgramCreateAccountComposer` with tests.

### Changed
1. Updated `AssociatedTokenAccount` to use `AssociatedTokenAccountProgramCreateAccountComposer` and sign the transaction in the `create_associated_token_account` method instead of the `prepare_create_associated_token_account` method.
 
### Fixed

## [0.0.6] - 2025-08-07
  
### Added
1. Added `from_address` method to `Solace::PublicKey`.
2. Change docs on most methods to include an `@example` section.

### Changed
1. Change `private_key` method on Keypair to `pivate_key_bytes`
2. Change README to include a practical example of using composers.
 
### Fixed
1. Fix `encode_signatures` method in `Solace::Serializers::TransactionSerializer` to correctly count the number of signatures using the `num_required_signatures` field in the message.


## [0.0.3] - 2025-07-30
  
### Added
1. Moved `TransferCheckedInstruction` and `TransferInstruction` to `Solace::Instructions::SystemProgram` namespace.
2. Added `get_token_account_balance` to `Solace::Connection`.
3. Added `get_or_create_address` to `Solace::Programs::AssociatedTokenAccount`.
4. Added Composer system for handling accounts and instructions in a higher level abstraction.
5. Added `SystemProgramTransferComposer` to `Solace::Composers` namespace.
6. Added `SplTokenProgramTransferCheckedComposer` to `Solace::Composers` namespace.
7. Moved TransferCheckedInstruction to proper namespace `Solace::Instructions::SplToken::TransferCheckedInstruction`.
8. Updated `get_or_create_address` to wait for confirmation before returning the address in `Solace::Programs::AssociatedTokenAccount`.
9. Moved default options to instance variable in `Solace::Connection`.
10. Moved test setup to `test/bootstrap.rb` and added rake task `bootstrap` to run it.

### Changed

THESE ARE BREAKING CHANGES FROM 0.0.2 TO 0.0.3. Solice is still in alpha and the API is subject to change. 

There was a bit of a refactoring of the codebase to make it more maintainable and to make it easier to add new features. Additonally, the SDK now has `Composers` for handling accounts and instructions in a higher level abstraction. These composers are used in the tests and can be used in your own code as well.

Soon, YARD documentation will be added to the SDK and published to https://solace-rb.github.io/solace/. 

Stay tuned.
 
### Fixed

N/A
